//usingHoldTimes
myOpts =["myBounce","anticipation","normal","linear","fastToSlow","slowToFast","steps","normal2","normal3","extra1","extra2"];
j=0;
markerStart=0;
holdTime=.9;
d=(index-1)*0;
l=thisLayer;
var myShapeArray = { startPosition: transform.position,
    theDirections: [
[0,[255,90+45]],
[3,[thisComp.layer("myGuide")]],
[0,[600,10]],
[0,[600,10]],	
]};function tomiEase(rate, startTime, endTime, startVal, endVal) {
    original = linear(time, startTime, endTime, 0, 2);
    myScale = rate.valueAtTime(original);
    return linear(myScale, -2, 2, startVal - (endVal - startVal), endVal);
}
function myAngles(startPosition, dist, ang) {
    r = dist;
    towatch1 = Math.sin(degreesToRadians(ang));
    towatch2 = Math.cos(degreesToRadians(ang));
    startVal = startPosition;
    endVal = startVal + [towatch2 * r, towatch1 * r];
    return endVal;
}
function myCircle(startPosition, radius, freq, phase, howMuchOfCycle, start, end, motionType) {
    freq = freq;
    phase = phase;
    amp = radius;
    myTime = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, end, 0, freq / (Math.PI * 2 / howMuchOfCycle));
    //myTime=linear(time,start,end,0,freq/(Math.PI*2/howMuchOfCycle));
    x = amp * Math.cos(phase + (freq * myTime))
    y = amp * Math.sin(phase + (freq * myTime))
    return [x, y] + startPosition + [-radius * Math.cos(phase), -radius * Math.sin(phase)];
    //How to make it always connect....the custom offset is generated based on the phase 
}
function refer(startPosition,refLayer,liquidTime,clutchTime)
{
    startVal = startPosition;
    extraaX= refLayer.position.valueAtTime(liquidTime)[0]-refLayer.position.valueAtTime(clutchTime)[0];
    extraaY= refLayer.position.valueAtTime(liquidTime)[1]-refLayer.position.valueAtTime(clutchTime)[1];
    endVal = startVal + [extraaX,extraaY];
    return endVal;
}


x = myShapeArray.startPosition;
end = l.marker.key(1 + markerStart).time + d;
j = 0;
endVal = 800;
startVal = myShapeArray.startPosition;
endVal = myShapeArray.startPosition;
theNumOfMoves = myShapeArray.theDirections.length;
motionType = 2;
while (time >= end && j < theNumOfMoves && j < l.marker.numKeys - 1 - markerStart) {
    //inside critical while loop
    theNumOfMoves = myShapeArray.theDirections.length;
    //above..check the length of the dictionary item
    seedRandom(j + 2, true);
    randDist = random(-100, 100);
    randAng = random(0, 360);
    randFreq = Math.PI * 2;
    randPhase = random(-Math.PI * 2, Math.PI * 2);
    randHow = Math.round(random(1, 4)) * .25;
    whichType = myShapeArray.theDirections[j][0];
    if (myShapeArray.theDirections[j].length == 3) {
        motionType = myShapeArray.theDirections[j][2];
    } else {
        motionType = 2
    }
    if (whichType == 0) {
        dist = myShapeArray.theDirections[j][1][0];
        ang = myShapeArray.theDirections[j][1][1];
    } else if (whichType == 2) {
        myPos = myShapeArray.theDirections[j][1][0];
    } else if (whichType == 3) {
        myRefLayer = myShapeArray.theDirections[j][1][0];
    } 
else {
        radius = myShapeArray.theDirections[j][1][0];
        freq = myShapeArray.theDirections[j][1][1];
        phase = myShapeArray.theDirections[j][1][2];
        howMuchOfCycle = myShapeArray.theDirections[j][1][3];
    }
    //the phase above is changing on every j increment
    j++
    start = end;
    startVal = x;
    if (l.marker.key(j).comment.length >0) {
        holdTime = parseFloat(l.marker.key(j).comment);
        if (whichType == 0) {
            endVal = myAngles(startVal, dist, ang);
            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;
            x = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, start+holdTime, startVal, endVal);
        } else if (whichType == 2) {
            endVal = myPos;
            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;
            x = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, start + holdTime, startVal, endVal);
        } 
else if (whichType == 3) {
            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;
				
				endVal=[100,100];

				if (time >=start && time < end)
				{
	            x=refer(startVal,myRefLayer,time,l.marker.key(j + markerStart).time);
				}
        } 

else {
            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;
            x = myCircle(startVal, radius, freq, phase, howMuchOfCycle, start, start + holdTime, motionType);
        }
    } else {

        if (whichType == 0) {
            endVal = myAngles(startVal, dist, ang);
            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;
            x = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, end, startVal, endVal);
        } else if (whichType == 2) {
            endVal = myPos;
            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;
            x = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, end, startVal, endVal);
        }
else if (whichType == 3) {
			//endVal = refer(startVal,myRefLayer,l.marker.key(j +1+ markerStart).time,l.marker.key(j + markerStart).time);

            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;
				

				if (time >=start && time < end)
				{
			x=refer(startVal,myRefLayer,time,l.marker.key(j + markerStart).time);
				}
			else
				{
					x=refer(startVal,myRefLayer,l.marker.key(j +1+ markerStart).time,l.marker.key(j + markerStart).time);
					}




        }
 else {
            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;
            x = myCircle(startVal, radius, freq, phase, howMuchOfCycle, start, end, motionType);
        }
    }

    //refill the dictioanary below
}
x;
